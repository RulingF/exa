# -*- coding: utf-8 -*-
# Copyright (c) 2015-2016, Exa Analytics Development Team
# Distributed under the terms of the Apache License 2.0
"""
Table of Isotopes
###########################################
This module provides an interface for interacting with isotopes of atoms; the
extended periodic table. For convenience, functions are provided for obtaining
traditionally used elements. This module also provides mappers for commonly
used dataframe manipulations.
"""
import six
from sqlalchemy import String, Float, Integer, Column
from exa.cms.base import BaseMeta, Base, session_factory


class Meta(BaseMeta):
    """Provides lookup methods for :class:`~exa.cms.isotope.Isotope`."""
    def get_by_strid(cls, strid):
        """Get an isotope using a string id."""
        return session_factory().query(cls).filter(cls.strid == strid).one()

    def get_by_symbol(cls, symbol):
        """Get all isotopes with a given element symbol."""
        return session_factory().query(cls).filter(cls.symbol == symbol).all()

    def compute_element(cls, name_or_symbol):
        """
        Get (i.e. compute) the element with the given name or symbol (an
        element"s data is given as an average over isotopic composition).
        """
        iso = cls.to_frame()
        h = ["H", "D", "T"]
        hn = ["hydrogen", "deuterium", "tritium"]
        if len(name_or_symbol) <= 3:
            if name_or_symbol in ["H", "D", "T"]:
                iso = iso[iso["symbol"].isin(h)]
            else:
                iso = iso[iso["symbol"] == name_or_symbol]
        else:
            name_or_symbol = name_or_symbol.lower()
            if name_or_symbol in hn:
                iso = iso[iso["name"].isin(hn)]
            else:
                iso = iso[iso["name"] == name_or_symbol]
        return Element.from_isotopes(iso)

    def _getitem(cls, key):
        """Custom getter that support strid (e.g. "1H") and symbols."""
        if isinstance(key, six.string_types):
            if key[0].isdigit():
                return cls.get_by_strid(key)
            elif len(key) <= 3:
                return cls.get_by_symbol(key)


class Isotope(six.with_metaclass(Meta, Base)):
    """
    A variant of a chemical element with a specific proton and neutron count.

        >>> h = Isotope["1H"]
        >>> h.A
        1
        >>> h.Z
        1
        >>> h.mass
        1.0078250321
        >>> Isotope["H"]
        [Isotope(1H), Isotope(2H), Isotope(3H), Isotope(4H), Isotope(5H), Isotope(6H), Isotope(7H)]
        >>> Isotope["13C"].szuid
        175
        >>> c = Isotope[57]
        >>> c.A
        13
        >>> c.Z
        6
        >>> c.strid
        '13C'
    """
    A = Column(Integer, nullable=False)
    Z = Column(Integer, nullable=False)
    af = Column(Float)
    eaf = Column(Float)
    color = Column(Integer)
    radius = Column(Float)
    gfactor = Column(Float)
    mass = Column(Float)
    emass = Column(Float)
    name = Column(String(length=16))
    eneg = Column(Float)
    quadmom = Column(Float)
    spin = Column(Float)
    symbol = Column(String(length=3))
    szuid = Column(Integer)
    strid = Column(Integer)

    @classmethod
    def element(cls, name_or_symbol):
        """Compute an element from its component isotopes."""
        return cls.compute_element(name_or_symbol)

    def __repr__(self):
        return "Isotope({0}{1})".format(self.A, self.symbol)


class Element(object):
    """
    An element is computed by taking the representative abundance fractions of
    each isotope having the same number of protons.

        >>> Element.from_symbol("H")
        Element(H)
        >>> Element.from_name("hydrogen")
        Element(H)
    """
    @staticmethod
    def from_symbol(symbol):
        """Element generated from a symbol."""
        symbol = symbol.title()
        return Isotope.compute_element(symbol)

    @staticmethod
    def from_name(name):
        """Element generated by name."""
        name = name.lower()
        return Isotope.compute_element(name)

    @classmethod
    def from_isotopes(cls, isotopes):
        """
        Static helper function for computing element data from a slice of the
        full isotope table.

        Args:
            isotopes (DataFrame): Slice containing all isotopes of desired element

        Returns:
            element (:class:`~exa.cms.isotope.Element`):
        """
        mass = (isotopes["af"]*isotopes["mass"]).sum()
        emass = mass*(isotopes["af"]*isotopes["emass"]/isotopes["mass"]).sum()
        idx = isotopes["af"].idxmax()
        items = ["A", "Z", "name", "symbol", "radius", "color"]
        anum, znum, name, symbol, radius, color = isotopes.ix[idx, items]
        return cls(name=name, symbol=symbol, A=anum, Z=znum, mass=mass,
                   emass=emass, radius=radius, color=color)

    def __init__(self, name, mass, emass, radius, A, Z, symbol, color):
        self.name = name
        self.symbol = symbol
        self.A = A
        self.Z = Z
        self.mass = mass
        self.emass = emass
        self.radius = radius
        self.color = color

    def __repr__(self):
        return "Element({0})".format(self.symbol)


def elements(index='name'):
    """
    Create a :class:`~pandas.Series` of :class:`~exa.cms.isotope.Element`
    objects.
    """
    isotopes = Isotope.to_frame()
    isotopes = isotopes[isotopes['af'].notnull()].groupby(index)
    return isotopes.apply(Element.from_isotopes)


def symbol_to_znum():
    """
    Create a "mapper" (:class:`~pandas.Series`) from element symbol to proton
    number ("Z"). This object can be used to quickly transform element symbols
    to proton number via:

    .. code-block:: Python

        mapper = symbol_to_z()
        z_series = symbol_series.map(mapper)
    """
    se = elements()
    mapper = se.apply(lambda ele: ele.Z)
    mapper.index = se.apply(lambda ele: ele.symbol)
    return mapper


def znum_to_symbol():
    """
    Create a mapper from proton number to element symbol.

    See Also:
        Opposite mapper of :func:`~exa.cms.isotope.symbol_to_z`.
    """
    se = elements()
    mapper = se.apply(lambda ele: ele.symbol)
    mapper.index = se.apply(lambda ele: ele.Z)
    return mapper


def symbol_to_radius():
    """Mapper from symbol pairs to sum of covalent radii."""
    se = elements()
    mapper = se.apply(lambda ele: ele.radius)
    mapper.index = se.apply(lambda ele: ele.symbol)
    return mapper


def symbol_to_mass():
    """Mapper from symbol to (element) mass."""
    se = elements()
    mapper = se.apply(lambda ele: ele.mass)
    mapper.index = se.apply(lambda ele: ele.symbol)
    return mapper


def symbol_to_color():
    """Mapper from isotope symbol to color."""
    se = elements()
    mapper = se.apply(lambda ele: ele.color)
    mapper.index = se.apply(lambda ele: ele.symbol)
    return mapper
